# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 414d0bd70fbb79c4499b50c67a799b5eb2ebbe965251ae0f48dd5a574e799a29
file:
- batch:
    statement:
      select_statement:
        select_clause:
        - keyword: SELECT
        - select_clause_element:
            function:
              function_name:
                function_name_identifier: DATE
              bracketed:
                start_bracket: (
                expression:
                  column_reference:
                    identifier: t
                end_bracket: )
            alias_expression:
              keyword: AS
              identifier: t_date
        - comma: ','
        - select_clause_element:
            function:
              function_name:
                function_name_identifier: ROUND
              bracketed:
              - start_bracket: (
              - expression:
                  column_reference:
                    identifier: b
              - comma: ','
              - expression:
                  literal: '2'
              - end_bracket: )
            alias_expression:
              keyword: AS
              identifier: b_round
        - comma: ','
        - select_clause_element:
            function:
              function_name:
                function_name_identifier: LEFT
              bracketed:
              - start_bracket: (
              - expression:
                  function:
                    function_name:
                      function_name_identifier: RIGHT
                    bracketed:
                    - start_bracket: (
                    - expression:
                        column_reference:
                          identifier: s
                    - comma: ','
                    - expression:
                        literal: '5'
                    - end_bracket: )
              - comma: ','
              - expression:
                  function:
                    function_name:
                      function_name_identifier: LEN
                    bracketed:
                      start_bracket: (
                      expression:
                        column_reference:
                          identifier: s
                        binary_operator: +
                        literal: '6'
                      end_bracket: )
              - end_bracket: )
            alias_expression:
              keyword: AS
              identifier: compound
        - comma: ','
        - select_clause_element:
            function:
              function_name:
                function_name_identifier: DATEADD
              bracketed:
              - start_bracket: (
              - date_part: month
              - comma: ','
              - expression:
                  numeric_literal:
                    sign_indicator: '-'
                    literal: '1'
              - comma: ','
              - expression:
                  column_reference:
                    identifier: column1
              - end_bracket: )
            alias_expression:
              keyword: AS
              identifier: column1_lastmonth
        - comma: ','
        - select_clause_element:
            function:
              function_name:
                keyword: convert
              bracketed:
              - start_bracket: (
              - data_type:
                  data_type_identifier: varchar
              - comma: ','
              - expression:
                  column_reference:
                  - identifier: tbl_b
                  - dot: .
                  - identifier: column1
              - comma: ','
              - literal: '23'
              - end_bracket: )
            alias_expression:
              keyword: AS
              identifier: column1_varchar
        from_clause:
          keyword: FROM
          from_expression:
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: tbl_b
- go_statement:
    keyword: GO
- batch:
    statement:
      create_function_statement:
      - keyword: CREATE
      - keyword: FUNCTION
      - object_reference:
        - identifier: dbo
        - dot: .
        - identifier: RandDate
      - function_parameter_list:
          bracketed:
            start_bracket: (
            parameter: '@admit'
            data_type:
              data_type_identifier: DATE
            end_bracket: )
      - keyword: RETURNS
      - keyword: TABLE
      - keyword: AS
      - procedure_statement:
          statement:
            return_segment:
              keyword: RETURN
              expression:
                bracketed:
                  start_bracket: (
                  expression:
                    select_statement:
                      select_clause:
                        keyword: SELECT
                        select_clause_element:
                          parameter: '@admit'
                      from_clause:
                        keyword: FROM
                        from_expression:
                          from_expression_element:
                            table_expression:
                              table_reference:
                              - identifier: dbo
                              - dot: .
                              - identifier: '[RandomDate]'
                  end_bracket: )
              statement_terminator: ;
- go_statement:
    keyword: GO
- batch:
    statement:
      create_function_statement:
      - keyword: CREATE
      - keyword: FUNCTION
      - object_reference:
        - identifier: dbo
        - dot: .
        - identifier: no_paramters
      - function_parameter_list:
          bracketed:
            start_bracket: (
            end_bracket: )
      - keyword: RETURNS
      - data_type:
          data_type_identifier: INT
      - keyword: AS
      - procedure_statement:
          statement:
            begin_end_block:
            - keyword: BEGIN
            - statement:
                return_segment:
                  keyword: RETURN
                  expression:
                    literal: '2'
                  statement_terminator: ;
            - keyword: END
