# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: f6ae1d53ab2ee7a93a331f55c82b67d02c7a6773f51fe0a6f8616e63174800fb
file:
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - keyword: file_format
    - comparison_operator: '='
    - bracketed:
      - start_bracket: (
      - keyword: type
      - comparison_operator: '='
      - keyword: csv
      - end_bracket: )
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - keyword: file_format
    - comparison_operator: '='
    - bracketed:
        start_bracket: (
        keyword: format_name
        comparison_operator: '='
        literal: "'mycsv'"
        end_bracket: )
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - keyword: file_format
    - comparison_operator: '='
    - bracketed:
        start_bracket: (
        keyword: type
        comparison_operator: '='
        literal: "'CSV'"
        end_bracket: )
    - keyword: pattern
    - comparison_operator: '='
    - literal: "'.*/.*/.*[.]csv[.]gz'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - keyword: from
    - internal_external_stage:
        literal: '@'
        identifier: my_int_stage
    - keyword: file_format
    - comparison_operator: '='
    - bracketed:
        start_bracket: (
        keyword: format_name
        comparison_operator: '='
        identifier: myformat
        end_bracket: )
    - keyword: pattern
    - comparison_operator: '='
    - literal: "'.*sales.*[.]csv'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - identifier: purge
    - comparison_operator: '='
    - identifier: 'true'
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - identifier: validation_mode
    - comparison_operator: '='
    - literal: "'RETURN_ERRORS'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - identifier: validation_mode
    - comparison_operator: '='
    - literal: "'RETURN_2_ROWS'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: copy
    - keyword: into
    - object_reference:
        identifier: mytable
    - identifier: validation_mode
    - comparison_operator: '='
    - literal: "'RETURN_3_ROWS'"
- statement_terminator: ;
- statement:
    copy_into_statement:
    - keyword: COPY
    - keyword: INTO
    - object_reference:
        identifier: target_table
    - keyword: FROM
    - bracketed:
        start_bracket: (
        select_statement:
          select_clause:
            keyword: SELECT
            select_clause_element:
              column_reference:
                identifier: $1
          from_clause:
            keyword: FROM
            from_expression:
              from_expression_element:
                table_expression:
                  table_reference:
                    literal: '@'
                alias_expression:
                  identifier: source_stage
        end_bracket: )
- statement_terminator: ;
